package week05;

public class 설명 {
    /*
    * Heap
    *
    *
    * Tree
    * 이진 트리 구조(binary tree)
    * 여러개의 노드가 트리 형태로 연결된 구조
    *
    * TreeSet - 중복 X
    * 이진 트리를 기반으로 한 Set 컬렉션
    * E first() : 제일 낮은 객체를 리턴
    * E last() : 제일 높은 객체를 리턴
    * E lower(E e): 주어진 객체보다 바로 아래를 리턴
    *
    * E ceiling(E e):
    * E pollFirst():
    * E pollLast():
    *
    * TreeMap - 키, 값 형태 (키는 중복 X)
    * 이진 트리를 기반으로 한 Map 컬렉션
    * Map.Entry<K, V> firstEntry()
    *
    * Tree
    * 선형 검색과 이진 검색
    * 선형 검색 >> 배열 안에 개수가 적으면 좋음?
    *   > 요소가 직선 모양으로 늘어선 배열에서 원하는 키 값을 갖는 요소를 만날 떄까지 맨 앞부터 순서대로 요소를 검색하는 알고리즘
    * 이진 검색
    *   > 요소가 "오름차순" 또는 "내림차순"으로 정렬된 배열에서 검색하는 알고리즘
    *   > 정렬된 요소에서 중간값을 찾아서 비교, 나머지값 무시
    *
    * 정렬
    * 대소 관계에 따라 데이터 집합을 일정한 순서로 나열하는 작업
    * 내부 정렬, 외부 정렬
    * 정렬 알고리즘의 핵심요소 - 교환, 선택, 삽입
    *
    * 버블정렬
    *
    * 단순선택 정렬
    * 가장 작은 요소룰 맨 앞으로 이동하고, 두 번째 작은 요소는 맨 앞에서 두 번재로 이동하는 등의 작업을 반복하는 알고리즘
    *   > 기준점을 제일 앞에 둠
    *
    * 단순삽입 정렬
    * 선택한 요소를 그보다 더 앞 쪽의 알맞은 위치에 삽입하는 작업을 반복하여 정렬하는 알고리즘
    *
    * 퀵 정렬
    * 하나의 리스트를 피벗(pivot)을 기준으로 두 개의 부분리스트로 나누어 하나는 피벗보다 작은 값들의 부분리스트, 다른 하나는 피벗보다 큰 값들의 부분리스트로 정렬한 다음,
    * 각 부분리스트에 대해 다시 위처럼 재귀적으로 수행하여 정렬하는 방법
    * */
}
